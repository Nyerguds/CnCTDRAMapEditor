; This file defines all files that are automatically identified when opening a .mix archive.
; The definitions can be split into separate files, per game.

; Games list. Items in this list require consecutive numbers starting from 0.
[Games]
0=TiberianDawn
1=RedAlert
2=SoleSurvivor

; Game definitions. Each section can define these things:
; ContentInis:   Optional. Extra inis (comma-separated) to read to find the data for this game.
;                All data will be looked up in these files first, and only then in this base file.
;                Note that each section name will be read only from the first-found occurrence.
; FileTypes:     Required if files use type definitions. Section(s) to read to find type
;                definitions used by for this game.
; FilesSections: Required. Name of the ini section(s) to read to find this game's files.
; Theaters:      Comma-separated list of theater info, usable as extra arguments in the file names.
;                Each info block is a colon-separated list, normally containing
;                "fullname:filename:extension" Adding more than these three items is possible.
; ModTheaters:   Secondary list of theaters. This list is handled after all filenames are generated
;                with the standard theaters, because id collisions on them are treated as less
;                important. This second iteration of all files only handles files whose type uses
;                the theater info.
; Hasher:        Hashing algorithm used to encode all filenames used by this game.
;                Choices are ROL1, ROL3, CRC32, ROL, Obscure, Obfuscate. Defaults to ROL1.
; NewMixFormat:  Default is false. True if this game can use the newer mix format with encryption.
; HasMixNesting: Default: false. True if mix archives of this game can occur inside mix archives.
;                This will make detection scans go inside any deeper mix archives to determine
;                which game the mix file is for.
[TiberianDawn]
ContentInis=mixcontent_td.ini
FileTypes=GeneralTypes,TypesTd
FilesSections=FilesTdSole,FilesTd
Theaters=Desert:desert:des,Temperate:temperat:tem,Winter:winter:win
ModTheaters=Jungle:jungle:jun,Snow:snow:sno,Caribbean:caribbea:car
Hasher=ROL1
NewMixFormat=false
HasMixNesting=false

[RedAlert]
ContentInis=mixcontent_ra1.ini
FileTypes=GeneralTypes,TypesRa
FilesSections=FilesRa
Theaters=Temperate:temperat:tem,Snow:snow:sno,Interior:interior:int
ModTheaters=Winter:winter:win,Desert:desert:des,Jungle:jungle:jun,Barren:barren:bar,Cave:cave:cav
Hasher=ROL1
NewMixFormat=true
HasMixNesting=true

; Sole Survivor has pretty much all TD files, except for its video and audio files.
[SoleSurvivor]
ContentInis=mixcontent_sole.ini,mixcontent_td.ini
FileTypes=GeneralTypes,TypesSole,TypesTd
FilesSections=FilesSole,FilesTdSole
Theaters=Desert:desert:des,Temperate:temperat:tem,Winter:winter:win
Hasher=ROL1
NewMixFormat=false
HasMixNesting=false

; Filetype formats. This system compacts the lists to entries generated from the same base name.
; Files that don't have multiple names generated from one base name (such as animation .shp files)
; don't have any benefit from using these types, so single-extension types are not defined here.
; Items in this list require consecutive numbers starting from 0.
[GeneralTypes]
0=TheaterExt    ; Any file with a theater extension; e.g. "cr1" -> "cr1.tem"
1=TheaterFile   ; Main file for a theater, with the given part as extension, e.g. "pal" -> "temperat.pal"
2=Video320      ; 320x200 video, expanded to a vqa/vqp pair.

; Type definitions.

; general rules:
; - Lines have consecutive keys starting from 0.
; - Blocks with "[]" iterate over the items inside. The items to iterate are either multiple
;   single characters or blocks inside ( ) brackets, or a single numeric range like "01-15".
; - {0} is the basic filename. This can be empty.
; - {1} is the first theater data; normally the full theater name (e.g. "Temperate")
; - {2} is the second theater data; normally the theater base name (e.g. "temperat")
; - {3} is the third theater data; normally the theater extension without the dot. (e.g. "tem")
;   Further theater data arguments ({3}, {4}, etc.) are possible if they are added to the theaters.
; - Extra info can be added per line as "0Info=". The {0}/{1}/etc arguments can also be used in this, but
;   iteration can't. If the filename contains info already, this is put behind it with a space in between.
; If no arguments higher than 0 are present in the basic name string, no iteration over theaters will happen.
; Custom sub-string formatting is supported:
; - A string like {2:1} uses the added number (in this case, "1") as cutoff length.
; - More detailed substring cutting can be done with {2:1-3}, specifying a start and end index.

[TheaterExt]
0={0}.{3}
0Info=({1})

[TheaterFile]
0={2}.{0}

[Video320]
0={0}.vqa
0Info=Video
1={0}.vqp
1Info=Video stretch table

